// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Cache.Response.proto

package cache

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Response struct {
	Value                []byte `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	ACSServerHandleTime  uint64 `protobuf:"varint,2,opt,name=ACSServerHandleTime,proto3" json:"ACSServerHandleTime,omitempty"`
	ACSClientHandleTime  uint64 `protobuf:"varint,3,opt,name=ACSClientHandleTime,proto3" json:"ACSClientHandleTime,omitempty"`
	GrpcServerHandleTime uint64 `protobuf:"varint,4,opt,name=GrpcServerHandleTime,proto3" json:"GrpcServerHandleTime,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe2c8224a41c59ec, []int{0}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response) GetACSServerHandleTime() uint64 {
	if m != nil {
		return m.ACSServerHandleTime
	}
	return 0
}

func (m *Response) GetACSClientHandleTime() uint64 {
	if m != nil {
		return m.ACSClientHandleTime
	}
	return 0
}

func (m *Response) GetGrpcServerHandleTime() uint64 {
	if m != nil {
		return m.GrpcServerHandleTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Response)(nil), "cache.Response")
}

func init() { proto.RegisterFile("Cache.Response.proto", fileDescriptor_fe2c8224a41c59ec) }

var fileDescriptor_fe2c8224a41c59ec = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x71, 0x4e, 0x4c, 0xce,
	0x48, 0xd5, 0x0b, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x4d, 0x06, 0x89, 0x2a, 0xed, 0x60, 0xe4, 0xe2, 0x80, 0xc9, 0x08, 0x89, 0x70, 0xb1,
	0x86, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x41, 0x38, 0x42, 0x06,
	0x5c, 0xc2, 0x8e, 0xce, 0xc1, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x1e, 0x89, 0x79, 0x29, 0x39,
	0xa9, 0x21, 0x99, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0xd8, 0xa4, 0xa0, 0x3a,
	0x9c, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0x90, 0x74, 0x30, 0xc3, 0x75, 0xa0, 0x4b, 0x09, 0x19, 0x71,
	0x89, 0xb8, 0x17, 0x15, 0x24, 0x63, 0x58, 0xc2, 0x02, 0xd6, 0x82, 0x55, 0xce, 0x49, 0xe2, 0xc4,
	0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1,
	0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x5e, 0x34, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xd3, 0x4b, 0x5b, 0x47, 0xfa, 0x00, 0x00, 0x00,
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GrpcServerHandleTime != 0 {
		i = encodeVarintCache_Response(dAtA, i, uint64(m.GrpcServerHandleTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ACSClientHandleTime != 0 {
		i = encodeVarintCache_Response(dAtA, i, uint64(m.ACSClientHandleTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ACSServerHandleTime != 0 {
		i = encodeVarintCache_Response(dAtA, i, uint64(m.ACSServerHandleTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCache_Response(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCache_Response(dAtA []byte, offset int, v uint64) int {
	offset -= sovCache_Response(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCache_Response(uint64(l))
	}
	if m.ACSServerHandleTime != 0 {
		n += 1 + sovCache_Response(uint64(m.ACSServerHandleTime))
	}
	if m.ACSClientHandleTime != 0 {
		n += 1 + sovCache_Response(uint64(m.ACSClientHandleTime))
	}
	if m.GrpcServerHandleTime != 0 {
		n += 1 + sovCache_Response(uint64(m.GrpcServerHandleTime))
	}
	return n
}

func sovCache_Response(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCache_Response(x uint64) (n int) {
	return sovCache_Response(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache_Response
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache_Response
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCache_Response
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCache_Response
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACSServerHandleTime", wireType)
			}
			m.ACSServerHandleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache_Response
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ACSServerHandleTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACSClientHandleTime", wireType)
			}
			m.ACSClientHandleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache_Response
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ACSClientHandleTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcServerHandleTime", wireType)
			}
			m.GrpcServerHandleTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache_Response
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcServerHandleTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCache_Response(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCache_Response
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCache_Response
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCache_Response(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCache_Response
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache_Response
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache_Response
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCache_Response
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCache_Response
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCache_Response
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCache_Response(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCache_Response
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCache_Response = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCache_Response   = fmt.Errorf("proto: integer overflow")
)
